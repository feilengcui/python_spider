" ================================================================="
" //                   default system settings                   //
" ================================================================="

" startup mode: evim(vim -y)
if v:progname =~? "evim"
  finish
endif

" close some vi compatible support
set nocompatible

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
else
  set backup		  " keep a backup file
endif

set history=50		" keep 50 lines of command line history
set ruler		      " show the cursor position all the time
set showcmd		    " display incomplete commands
set incsearch		  " do incremental searching

" Don't use Ex mode, use Q for formatting
map Q gq

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")
  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on
  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!
  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78
  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif
  augroup END
else
  set autoindent		" always set autoindenting on
endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif


" ================================================================="
" //                     vundle settings                         //
" ================================================================="

" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just
" :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to
" auto-approve removal
" see :h vundle for more details or wiki for FAQ
filetype off                                                   " close filetype detection
set rtp+=~/.vim/bundle/Vundle.vim                              " add runtime path
call vundle#begin()
Plugin 'gmarik/Vundle.vim'                                     " vundle vim plugin
Plugin 'tpope/vim-fugitive'                                    " git wrapper
Plugin 'L9'                                                    " some utility functions and commands for programming in Vim
Plugin 'bling/vim-airline'                                     " airline plugin
Plugin 'airblade/vim-gitgutter'                                " show git status
Plugin 'vim-scripts/winmanager'                                " window manager
Plugin 'taglist.vim'                                           " ctags support
Plugin 'scrooloose/nerdtree'                                   " file trees
Plugin 'ervandew/supertab'                                     " support for using <Tab> for autocomplete
Plugin 'vim-scripts/AutoComplPop'                              " auto pop completion window
Plugin 'honza/vim-snippets'                                    " code snippets
Plugin 'SirVer/ultisnips'                                      " snippets engine supporting vim-snippets
Plugin 'fatih/vim-go'                                          " go support, need gocode daemon for autocomplete
Plugin 'Valloric/YouCompleteMe'                                " syntax autocomplete for c/c++ etc
Plugin 'Markdown-syntax'                                       " markdown
"Plugin 'ervandew/eclim'                                       " eclim for java
call vundle#end()
filetype plugin indent on                                      " reopen filetype plugin


" ================================================================="
" //                     personal settings                       //
" ================================================================="

set nu                                                         " show line number
set nobackup                                                   " do not backup file
color evening                                                  " color theme
set tabstop=2                                                  " number of spaces for a tab
set shiftwidth=2                                               " number of spaces for each auto indent
set expandtab                                                  " use spaces to replace tab
set tags=tags                                                  " ctags
set tags+=./tags;/                                             " support tags in current dir and parent dir

" map key to use <F5> to remove EOL space
nnoremap <F5> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar><CR>

" cursorline and cursorcolumn
set cursorline
set cursorcolumn
highlight CursorLine   cterm=NONE ctermbg=blue ctermfg=yellow guibg=NONE guifg=NONE
highlight CursorColumn cterm=NONE ctermbg=blue ctermfg=yellow guibg=NONE guifg=NONE
set colorcolumn=100

let g:winManagerWindowLayout="TagList|FileExplorer"            " window manager layout
let g:winManagerWidth=35                                       " width
nmap wm :WMToogle<cr>

set laststatus=2                                               " always show status on the last window
let g:airline_section_b = '%{fugitive#statusline()}'           " airline vim-fugitive git branch status
let g:airline_section_c = '%{strftime("%c")}'                  " airline time
let g:airline#extensions#tabline#enabled = 1                   " tabline
let g:airline_theme="hybrid"                                   " airline theme

"set encoding=utf-8                                            " encoding used inside vim
"set fileencoding=utf-8                                        " encoding for file content, auto converted when write file
"set termencoding=utf-8                                        " terminal encoding from keybord input
"set guioptions-=m                                             " menu bar
"set guioptions-=T                                             " tool bar
"set guioptions-=r                                             " right-hand scrollbar always
"set guioptions-=L                                             " left-hand scrollbar when window is splitted
"set guifont=Consolas:h12                                      " font family and font size

let g:ycm_global_ycm_extra_conf = "~/.vim/.ycm_extra_conf.py"  " conf for YouCompleteMe
let g:ycm_key_list_select_completion=[]
let g:ycm_key_list_previous_completion=[]
let g:ycm_confirm_extra_conf = 0


set completeopt=longest,menu                                   " popup preview window for autocomplete

let g:SuperTabDefaultCompletionType = 'context'                " supertab default compeletion type

"let g:EclimCompletionMethod = 'omnifunc'                      " eclim plugin for java autocomplete, don't use with YouCompleteMe
"set runtimepath-=~/.vim/bundle/YouCompleteMe                  " when use eclim, remove YouCompleteMe

let g:gitgutter_real_time = 1                                  " git gutter status realtime
let g:gitgutter_eager = 1                                      " running eagerly
